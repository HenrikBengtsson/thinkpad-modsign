#!/usr/bin/env bash
### Thinkpad X1 Secure Boot Registration and Signing
###
### Usage:
###  thinkpad-boot (bios|...)
###
### Commands:
###  key_make       Generate keys for signing modules
###  sign*          Sign modules (for VirtualBox and VMWare)
###  key_register   Register signed modules for next reboot
###  all*           key_make, sign, and key_register at once
###
###  bios*          Display BIOS version
###  kernel         Display Linux kernel version
###
###  * requires sudo rights
###
### Options:
###  --verbose      Verbose output
###  --help         This help
###  --version      Display version
###
### Example:
###  thinkpad-boot key_make
###  thinkpad-boot sign
###  thinkpad-boot key_register
###
### References:
### * https://bugs.launchpad.net/ubuntu/+source/mokutil/+bug/1600452
### * https://github.com/rhinstaller/shim/issues/55
### * https://askubuntu.com/questions/707281/vmware-workstation-12-vmmon-not-found-or-not-loaded
###
### Version: 0.0.1-9000
### Copyright: Henrik Bengtsson (2017)
### License: GPL (>= 2.1) [https://www.gnu.org/licenses/gpl.html]
call="$0 $*"

function mecho() { echo "$@" 1>&2; }
function mdebug() {
    if [[ $debug == true ]]; then
        mecho "[DEBUG] $@";
    fi
}
function vecho() {
    if [[ $verbose == true ]]; then
        echo "$@";
    fi
}

function version() {
    grep -E "^###[ ]*Version:[ ]*" $0 | sed 's/###[ ]*Version:[ ]*//g'
}

function help() {
    local res=$(grep "^###" $0 | grep -vE '^(####|### whatis: )' | cut -b 5-)
    printf '%s\n' "${res[@]}"
}

function bios_version() {
    sudo dmidecode -s bios-version
}

function kernel_version() {
    uname -r
}

function generate_mok_key() {
    date=$(date +%Y-%m-%d)
    subj="/CN=Key generated by ${user} on ${date} via thinkpad-boot/"
    key_name="MOK"
    key_priv=${key_name}.priv
    key_der=${key_name}.der
    cmd="openssl req -new -x509 -newkey rsa:2048 -keyout ${key_priv} -outform DER -out ${key_der} -nodes -days 36500 -subj \"${subj}\""
    mdebug "Command: ${cmd}"
    openssl req -new -x509 -newkey rsa:2048 -keyout ${key_priv} -outform DER -out ${key_der} -nodes -days 36500 -subj "${subj}"
    mdebug "Next: thinkpad-boot sign"
}

function register_mok_key_with_secureboot() {
    mecho "This step will give you the option to apply the signed modules via Secure Boot the next time you reboot the machine. In order for Secure Boot to do this, it needs you to enter the password that you choose here."
    
    key_name="MOK"
    key_der=${key_name}.der
    if [[ ! -f ${key_der} ]]; then
	mecho "Der MOK key file missing: ${key_der}"
    fi
    sudo mokutil --import ${key_der}
}

function sign_kernel_modules() {
    modules="$*"
    kernel=$(kernel_version)
    key_name="MOK"
    key_priv=${key_name}.priv
    key_der=${key_name}.der
    if [[ ! -f ${key_priv} ]]; then
	mecho "Private MOK key file missing: ${key_priv}"
    fi
    if [[ ! -f ${key_der} ]]; then
	mecho "Der MOK key file missing: ${key_der}"
    fi
    mdebug "Signing Kernel Modules ..."
    mdebug " - Modules: ${modules}"
    for module in ${modules}; do
	module_info=$(modinfo -n ${module})
        mdebug "   - Module: '${module}' (${module_info})"
        cmd="sudo /usr/src/linux-headers-${kernel}/scripts/sign-file sha256 ${key_priv} ${key_der} ${module_info}"
	mdebug "     Command: ${cmd}"
	${cmd}
    done
    mdebug "Signing Kernel Modules ... DONE"
}

function sign_virtualbox_modules() {
    mdebug "Signing VirtualBox Modules ..."
    sign_kernel_modules vboxdrv vboxnetflt vboxnetadp vboxpci
    mdebug "Signing VirtualBox Modules ... DONE"
    mdebug "Next: thinkpad-boot key_register"
}


function sign_vmware_modules() {
    mdebug "Signing VMWare Modules ..."
    sign_kernel_modules vmmon vmnet
    mdebug "Signing VMWare Modules ... DONE"
    mdebug "Next: thinkpad-boot key_register"
}


## Actions
action=help

## Options
force=false
skip=false
debug=false
verbose=false
dryrun=false
extras=

user=$USER

# Parse command-line options
while [[ $# > 0 ]]; do
    opt=$1
    if test "$1" == "--help"; then
        action=help
    elif test "$1" == "--version"; then
        action=version
    elif test "$1" == "bios"; then
        action=bios
    elif test "$1" == "kernel"; then
        action=kernel
    elif test "$1" == "key_make"; then
        action=key_make
    elif test "$1" == "sign"; then
        action=sign
    elif test "$1" == "key_register"; then
        action=key_register
    elif test "$1" == "all"; then
        action=all
    elif test "$1" == "--debug"; then
        debug=true
    elif test "$1" == "--verbose"; then
        verbose=true
    elif test "$1" == "--force"; then
        force=true 
    elif test "$1" == "--skip"; then
        skip=true
    elif test "$1" == "--dry-run"; then
        dryrun=true
    elif test "$1" == "--user"; then
        shift
        user=$1
    else
        extras="$extras $1"
    fi
    shift
done

if [[ $debug == true ]]; then
    mdebug "call: $call"
    mdebug "action: $action"
    mdebug "verbose: $verbose"
    mdebug "force: $force"
    mdebug "skip: $skip"
    mdebug "dryrun: $dryrun"
    mdebug "extras: $extras"
fi

if [[ $action == "version" ]]; then
    version
    exit 0
elif [[ $action == "help" ]]; then
    help 
    exit 0
fi

if [[ $action == "bios" ]]; then
    bios_version
    exit $?
elif [[ $action == "kernel" ]]; then
    kernel_version
    exit $?
elif [[ $action == "key_make" ]]; then
    generate_mok_key
    exit $?
elif [[ $action == "sign" ]]; then
    sign_virtualbox_modules
    sign_vmware_modules
    exit $?
elif [[ $action == "key_register" ]]; then
    register_mok_key_with_secureboot
    exit $?
elif [[ $action == "all" ]]; then
    generate_mok_key
    sign_virtualbox_modules
    sign_vmware_modules
    register_mok_key_with_secureboot
    exit $?
fi
